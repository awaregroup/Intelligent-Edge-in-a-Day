/************************************************************************************************
 * This code was automatically generated by Digital Twin Code Generator tool 0.6.8.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 *
 * Generated Date: 2/24/2020
 ***********************************************************************************************/

#ifndef AZURE1_IMPL
#define AZURE1_IMPL

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <sys/utsname.h>
#include <sys/time.h>
#include <fcntl.h> // Contains file controls like O_RDWR
#include <errno.h> // Error integer and strerror() function
#include <termios.h> // Contains POSIX terminal control definitions
#include <unistd.h> // write(), read(), close()
#include <pthread.h>

#include "azure_c_shared_utility/xlogging.h"
#include "azure_c_shared_utility/threadapi.h"
#include "parson.h"

#ifdef WIN32
#include <windows.h>
#pragma pack(push) 
#pragma pack(1)
#endif

/**
* Type definition
*/

/**
* @brief Result of DigitalTwin command execution.
*/
typedef enum DIGITALTWIN_COMMAND_RESULT_TAG
{
    DIGITALTWIN_COMMAND_OK,
    DIGITALTWIN_COMMAND_TIMEOUT,
    DIGITALTWIN_COMMAND_ERROR
} DIGITALTWIN_COMMAND_RESULT;

typedef struct FIRMWARE_FOTA_FotaResponse_TAG
{
    char* firmware_result;

} FIRMWARE_FOTA_FotaResponse;

typedef struct ACC_ACC_VALUE_TAG
{
    double acc_x;

    double acc_y;

    double acc_z;

} ACC_ACC_VALUE;

typedef struct MAG_MAG_VALUE_TAG
{
    double mag_x;

    double mag_y;

    double mag_z;

} MAG_MAG_VALUE;

typedef struct GYRO_GYRO_VALUE_TAG
{
    double gryo_x;

    double gryo_y;

    double gryo_z;

} GYRO_GYRO_VALUE;

/**
* Device telemetries related methods.
*/

void Acc_Telemetry_ReadAcc_value(ACC_ACC_VALUE * acc_value);

void Mag_Telemetry_ReadMag_value(MAG_MAG_VALUE * mag_value);

void Gyro_Telemetry_ReadGyro_value(GYRO_GYRO_VALUE * gyro_value);

double Temp_Telemetry_ReadTemp_value();

double Press_Telemetry_ReadPress_value();

double Hum_Telemetry_ReadHum_value();

double Mic_Telemetry_ReadMic_level_value();

/**
* Device properties related methods.
*/

char* DeviceInfo_Property_GetManufacturer();

char* DeviceInfo_Property_GetModel();

char* DeviceInfo_Property_GetSwVersion();

char* DeviceInfo_Property_GetOsName();

char* DeviceInfo_Property_GetProcessorArchitecture();

char* DeviceInfo_Property_GetProcessorManufacturer();

long DeviceInfo_Property_GetTotalStorage();

long DeviceInfo_Property_GetTotalMemory();

char* Firmware_Property_GetFirmware_status();

/**
* Device commands related methods.
*/

DIGITALTWIN_COMMAND_RESULT Firmware_Command_FOTA(char* URI_Fota, FIRMWARE_FOTA_FotaResponse* response, unsigned int* statusCode);

// Callbacks to handle the confirmation result of sending telemetry
void SendTelemetry_Succeeded_Callback(const char* interfaceName);
void SendTelemetry_Error_Callback(const char* interfaceName);

// Callbacks to handle the confirmation result of reporting property
void ReportProperty_Succeeded_Callback(const char* interfaceName, const char* propertyName);
void ReportProperty_Error_Callback(const char* interfaceName, const char* propertyName);

int InitializeSensorTile(const char* comPort);
int Get_PresentationString(int hComm, int MaxLen, unsigned char* Buffer);

#define TMsg_EOF     0xF0
#define TMsg_BS      0xF1
#define TMsg_BS_EOF  0xF2
#define TMsg_MaxLen  1024

#define CMD_Ping                                    0x01
#define CMD_Read_PresString                         0x02
#define CMD_NACK                                    0x03
#define CMD_Start_Data_Streaming                    0x08
#define CMD_Stop_Data_Streaming		        	    0x09
#define CMD_Set_DateTime                            0x0C
#define CMD_Get_DateTime                            0x0D
#define CMD_Reset                                   0x0F
#define CMD_Sensor                                  0x50
#define CMD_Reply_Add                               0x80

#define FDevAddr                                    1U
#define STEVAL_IDI001V1_ADDR	                    50U

typedef struct {
	unsigned int Len;
	unsigned char Data[TMsg_MaxLen];
} TMsg;

typedef struct {
	//unsigned char data0;
	//unsigned char data1;
	//unsigned char data2;
	unsigned char hours;
	unsigned char minutes;
	unsigned char seconds;
	unsigned char sub_seconds;
	unsigned char pressure;
	unsigned char data8;
	unsigned char data9;
	unsigned char data10;
	unsigned char temperature;
	unsigned char data12;
	unsigned char data13;
	unsigned char data14;
	unsigned char humidity;
	unsigned char data16;
	unsigned char data17;
	unsigned char data18;
	unsigned char accx;
	unsigned char data20;
	unsigned char data21;
	unsigned char data22;
	unsigned char accy;
	unsigned char data24;
	unsigned char data25;
	unsigned char data26;
	unsigned char accz;
	unsigned char data28;
	unsigned char data29;
	unsigned char data30;
	unsigned char gyrox;
	unsigned char data32;
	unsigned char data33;
	unsigned char data34;
	unsigned char gyroy;
	unsigned char data36;
	unsigned char data37;
	unsigned char data38;
	unsigned char gyroz;
	unsigned char data40;
	unsigned char data41;
	unsigned char data42;
	unsigned char magx;
	unsigned char data44;
	unsigned char data45;
	unsigned char data46;
	unsigned char magy;
	unsigned char data48;
	unsigned char data49;
	unsigned char data50;
	unsigned char magz;
	unsigned char data52;
	unsigned char data53;
	unsigned char data54;
	unsigned char flag;
	unsigned char int_status;
	unsigned char mlc0;
	unsigned char mlc1;
	unsigned char mlc2;
	unsigned char mlc3;
	unsigned char mlc4;
	unsigned char mlc5;
	unsigned char mlc6;
	unsigned char mlc7;
} SENSOR_DATA;

typedef struct {
	float temperature;
	float humidity;
	float pressure;
	unsigned int gyrox;
	unsigned int gyroy;
	unsigned int gyroz;
	unsigned int magx;
	unsigned int magy;
	unsigned int magz;
	unsigned int accx;
	unsigned int accy;
	unsigned int accz;
} SENSOR_DATA_CACHE;

SENSOR_DATA_CACHE SensorDataCache;

#define FBufferMaxLen 2048

#ifdef WIN32
typedef struct _RAW_SMBIOS_DATA
{
    BYTE	Used20CallingMethod;
    BYTE	SMBIOSMajorVersion;
    BYTE	SMBIOSMinorVersion;
    BYTE	DmiRevision;
    DWORD	Length;
    PBYTE	SMBIOSTableData;
} RAW_SMBIOS_DATA, * PRAW_SMBIOS_DATA;

typedef struct _SMBIOS_HEADER
{
    BYTE Type;
    BYTE Length;
    WORD Handle;
}SMBIOS_HEADER, * PSMBIOS_HEADER;

typedef struct _TYPE_0_ {
    PSMBIOS_HEADER	Header;
    UCHAR	Vendor;
    UCHAR	Version;
    UINT16	StartingAddrSeg;
    UCHAR	ReleaseDate;
    UCHAR	ROMSize;
    ULONG64 Characteristics;
    UCHAR	Extension[2]; // spec. 2.3
    UCHAR	MajorRelease;
    UCHAR	MinorRelease;
    UCHAR	ECFirmwareMajor;
    UCHAR	ECFirmwareMinor;
} SMBIOS_BIOS_INFO, * PMBIOS_BIOS_INFO;

typedef struct _TYPE_1_ {
    SMBIOS_HEADER	Header;
    UCHAR	Manufacturer;
    UCHAR	ProductName;
    UCHAR	Version;
    UCHAR	SN;
    UCHAR	UUID[16];
    UCHAR	WakeUpType;
    UCHAR	SKUNumber;
    UCHAR	Family;
} SMBIOS_SYSTEM_INFO, * PSMBIOS_SYSTEM_INFO;

typedef struct _TYPE_4_ {
    SMBIOS_HEADER Header;
    UCHAR	SocketDesignation;
    UCHAR	Type;
    UCHAR	Family;
    UCHAR	Manufacturer;
    ULONG64 ID;
    UCHAR	Version;
    UCHAR	Voltage;
    UINT16	ExtClock;
    UINT16	MaxSpeed;
    UINT16	CurrentSpeed;
    // Todo, Here

} SMBIOS_PROCESSOR, * PSMBIOS_PROCESSOR;

RAW_SMBIOS_DATA* ReadSMBiosData();
char* GetManufacturer(PRAW_SMBIOS_DATA pSMBIOS);
char* GetSmbiosProductName(PRAW_SMBIOS_DATA pSMBIOS);
char* GetSmbiosVersion(PRAW_SMBIOS_DATA pSMBIOS);
char* GetProcessorManufacturer(PRAW_SMBIOS_DATA pSMBIOS);
#endif

#ifdef __cplusplus
}
#endif

#endif // AZURE1_IMPL
